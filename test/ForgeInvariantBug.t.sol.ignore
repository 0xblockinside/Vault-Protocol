// SPDX-License-Identifier: Unlicense
pragma solidity ^0.8.17;

import {Test} from "forge-std/Test.sol";


contract A {
    function a_shouldnt_be_tested() pure external {
        // revert();
    }

    function b_shouldnt_be_tested() pure external {
        // revert();
    }
}

contract Handler {
    function a_should_be_tested() external {
        new A();
    }

}

contract ForgeInvariantBug is Test {
    Handler h;
    function setUp() external {
        h = new Handler();

        bytes4[] memory selectors = new bytes4[](1);
        selectors[0] = Handler.a_should_be_tested.selector;
        targetSelector(FuzzSelector({
            addr: address(h),
            selectors: selectors
        }));
    }

    /// forge-config: default.invariant.runs = 3
    /// forge-config: default.invariant.depth = 10
    /// forge-config: default.invariant.fail-on-revert = true
    /// forge-config: default.invariant.call-override = false
    function invariant_a() external {
        assertTrue(true);
    }
}